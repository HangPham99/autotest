@using BlazorApp1.Services.Interface
@using BlazorApp1.Models
@inject IProjectDetailService _service
@inject IJSRuntime JsRuntime;

<div class="simple-form">

    <div class="form-group">
        <label for="movie-name">Function Name</label>
        <input @bind="@function.FunctionName" type="text" class="form-control" id="project-name" style="min-width:500px" />
    </div>

    <button @onclick="SaveFunction" class="btn btn-primary" style="margin:5px;">Submit</button>
    <button @onclick="Cancel" class="btn btn-secondary" style="margin:5px;">Cancel</button>
</div>

@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [Parameter] public BlazorApp1.Models.ProjectDetail function { get; set; }


    protected override async Task OnInitializedAsync()
    {

    }

    async void SaveFunction()
    {
        if (string.IsNullOrEmpty(@function.FunctionName))
        {
            await JsRuntime.InvokeAsync<bool>("confirm", "The project's function is not allowed to empty");
            return;
        }
        function.ModifiedDate = DateTime.UtcNow;
        try
        {
            await _service.UpdateFunction(function);
            await ModalInstance.CloseAsync(ModalResult.Ok<BlazorApp1.Models.ProjectDetail>(function));
        }
        catch
        {
            await JsRuntime.InvokeVoidAsync("Error", "Something when wrong");
        }

    }

    async void Cancel()
    {
        await ModalInstance.CancelAsync();
    }

}