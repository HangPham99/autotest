@page "/functiontesting"
@using BlazorApp1.Services.Interface;
@inject IFunctionTesting FunctionTestingService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IHttpClientFactory ClientFactory
@using System.Net.Http.Json;
@using System.Net.Http;
@using BlazorApp1.Commons;
@using System.IO;
@using Services;
@using System.Text.Json

<h3>FunctionTesting</h3>
<br />
<Button Color="Color.Info" Clicked="@UploadFile">Import </Button>
<div>
    <FileEdit Changed="@OnChanged" />
</div>
<Table>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>File name</TableHeaderCell>
            <TableHeaderCell>Date Modified</TableHeaderCell>
            <TableHeaderCell>     </TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var functionTesting in ListFunctionTesting)
        {
            <TableRow>
                <TableRowCell>@functionTesting.FileName</TableRowCell>
                <TableRowCell>@functionTesting.ModifiedDate</TableRowCell>

                <TableRowCell>
                    <Icon @onclick="NavigateToCounterComponent" Name=" IconName.ArrowRight" />
                    <Icon Name="IconName.Delete" />
                    <Icon Name="IconName.Download" />
                </TableRowCell>
            </TableRow>}
    </TableBody>
</Table>

@code {
    private IFileEntry loadedFile = null;
    private List<BlazorApp1.Models.FunctionTesting> ListFunctionTesting;
    private bool isLoading;
    private List<UploadResult> uploadResults = new();

    protected override async Task OnInitializedAsync()
    {
        ListFunctionTesting = FunctionTestingService.GetAllProject().ToList();
    }
    string message = "";

    private void OnChanged(FileChangedEventArgs e)
    {
        if (e.Files.Count() > 0)
        {
            loadedFile = e.Files[0];
        }
    }

    private async void UploadFile()
    {

        if (loadedFile != null)
        {
            using var content = new MultipartFormDataContent();

            using (var stream = new MemoryStream())
            {
                await loadedFile.WriteToStreamAsync(stream);
                stream.Seek(0, SeekOrigin.Begin);

                content.Add(
           content: new StreamContent(stream),
           name: "\"files\"",
           fileName: loadedFile.Name);

                var client = ClientFactory.CreateClient();

                var response =
                    await client.PostAsync("https://localhost:5001/Filesave",
                    content);

                if (response.IsSuccessStatusCode)
                {
                    var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true,
                    };
                    using var responseStream =
                        await response.Content.ReadAsStreamAsync();

                    var newUploadResults = await JsonSerializer
                        .DeserializeAsync<IList<UploadResult>>(responseStream, options);

                    uploadResults = uploadResults.Concat(newUploadResults).ToList();
                }
            }
        }
    }
    //file
    string fileContent;

    void OnWritten(FileWrittenEventArgs e)
    {
        Console.WriteLine($"File: {e.File.Name} Position: {e.Position} Data: {Convert.ToBase64String(e.Data)}");
    }

    void OnProgressed(FileProgressedEventArgs e)
    {
        Console.WriteLine($"File: {e.File.Name} Progress: {e.Percentage}");
    }
    //link
    private void NavigateToCounterComponent() { NavigationManager.NavigateTo("testscreen"); } }