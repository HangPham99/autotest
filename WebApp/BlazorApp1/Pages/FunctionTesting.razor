@page "/functiontesting/{FunctionId:int}"
@using BlazorApp1.Services.Interface;
@using BlazorApp1.Models;
@inject IFunctionTesting FunctionTestingService
@inject IProjectDetailService ProjectDetailService
@inject NavigationManager NavigationManager
@if (ProjectDetail != null)
{
    <h3>@ProjectDetail.FunctionName - Function Testing</h3>
    <br />
    <Button Color="Color.Info">Import </Button>
    <br />
    <div>
        <FileEdit Written="@OnWritten" Progressed="@OnProgressed" />
    </div>
    <Table>
        <TableHeader>
            <TableRow>
                <TableHeaderCell>File name</TableHeaderCell>
                <TableHeaderCell>Date Modified</TableHeaderCell>
                <TableHeaderCell>     </TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @if (ListFunctionTesting != null)
            {
                @foreach (var functionTesting in ListFunctionTesting)
                {
                    <TableRow>
                        <TableRowCell>@functionTesting.FileName</TableRowCell>
                        <TableRowCell>@functionTesting.ModifiedDate</TableRowCell>

                        <TableRowCell>
                            <Icon @onclick="NavigateToCounterComponent" Name=" IconName.ArrowRight" />
                            <Icon Name="IconName.Delete" />
                            <Icon Name="IconName.Download" />
                        </TableRowCell>
                    </TableRow>
                }
            }

        </TableBody>
    </Table>
}


@code {
    private IEnumerable<BlazorApp1.Models.FunctionTesting> ListFunctionTesting;

    [Parameter]
    public int FunctionId { get; set; }

    private ProjectDetail ProjectDetail { get; set; }
    protected override async Task OnInitializedAsync()
    {
        ProjectDetail = await ProjectDetailService.GetProjectDetailById(FunctionId);

        if (ProjectDetail != null)
        {
            ListFunctionTesting = await FunctionTestingService.GetAllFunctionByProjectDetailId(FunctionId);
        }
    }

    //file
    string fileContent;

    void OnWritten(FileWrittenEventArgs e)
    {
        Console.WriteLine($"File: {e.File.Name} Position: {e.Position} Data: {Convert.ToBase64String(e.Data)}");
    }

    void OnProgressed(FileProgressedEventArgs e)
    {
        Console.WriteLine($"File: {e.File.Name} Progress: {e.Percentage}");
    }
    //link
    private void NavigateToCounterComponent() { NavigationManager.NavigateTo("testscreen"); }
}